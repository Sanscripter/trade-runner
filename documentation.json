{
    "pipes": [],
    "interfaces": [
        {
            "name": "ICity",
            "id": "interface-ICity-b4660e4d633ed34ee7b843a2dd5947ed48f159755c885c651a8052f5e1c07aedc5a496076f47474554ff6691801203410184e9e7d219b2324f8a24fdbdff5d11",
            "file": "src/app/utils/ICity.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Inventory } from \"../game/Inventory\";\r\n\r\nexport default interface ICity {\r\n  id: number;\r\n  x: number;\r\n  y:number;\r\n  name: string;\r\n  size: number;\r\n  inventory?: Inventory | any;\r\n  money?: number;\r\n  health?: number;\r\n  traderMugshot?: string;\r\n  background?: string;\r\n  description?: string;\r\n  barks?: string[];\r\n}\r\n",
            "properties": [
                {
                    "name": "background",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "barks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "health",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "inventory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Inventory | any",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "money",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "traderMugshot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "GameService",
            "id": "injectable-GameService-4174f3bb17e23abbb30987425da38b32c8c5c8c2b991055c65ccc40e9ffb78bb836bb3c01103de223bfbc9216d0028597eca7d08474cb5fe8c17b80df1e87bcd",
            "file": "src/app/shared/game.service.ts",
            "properties": [
                {
                    "name": "_eventLog",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameEvent[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "activeEvents",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameEvent[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "cities",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICity[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "configs",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "dailyEventLimit",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "day",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "daysLimit",
                    "defaultValue": "30",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "game",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Game",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "player",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Player",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methods": [
                {
                    "name": "advanceDay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "eraseSave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "generateEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCurrentDay",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCurrentLocalEconomy",
                    "args": [
                        {
                            "name": "location",
                            "type": "ICity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ICity",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "location",
                            "type": "ICity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isGameOver",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadGame",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "proccessEventEffect",
                    "args": [
                        {
                            "name": "event",
                            "type": "GameEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "GameEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "produceMoreItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reflectEconomicStatus",
                    "args": [
                        {
                            "name": "location",
                            "type": "ICity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "relevantEvents",
                            "type": "GameEvent[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 241,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "location",
                            "type": "ICity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "relevantEvents",
                            "type": "GameEvent[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetGame",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveGame",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupCities",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupPlayer",
                    "args": [
                        {
                            "name": "playerName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "playerName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startGame",
                    "args": [
                        {
                            "name": "playerName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "playerName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateLocationPrices",
                    "args": [
                        {
                            "name": "location",
                            "type": "ICity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "relevantEvents",
                            "type": "GameEvent[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 225,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "location",
                            "type": "ICity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "relevantEvents",
                            "type": "GameEvent[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "upstatePlayerPrices",
                    "args": [
                        {
                            "name": "relevantEvents",
                            "type": "GameEvent[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "relevantEvents",
                            "type": "GameEvent[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Game } from '../game/Game';\r\nimport { Player } from '../game/Player';\r\nimport { Item } from '../game/Item';\r\nimport ICity from '../utils/ICity.interface';\r\nimport { Inventory } from '../game/Inventory';\r\nimport * as LocationsConfig from '../game/configs/locations.json';\r\nimport * as ItemsConfig from '../game/configs/items.json';\r\nimport * as GameEventsConfig from '../game/configs/game_events.json';\r\nimport { ENDINGS } from '../game/Endings.enum';\r\nimport { EFFECT_TYPES } from '../game/Effect_Types.enum';\r\nimport { GameEvents as GameEvent } from '../game/GameEvents';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GameService {\r\n\r\n  game!: Game;\r\n  player!: Player;\r\n  day: number = 1;\r\n  daysLimit: number = 30;\r\n  dailyEventLimit: number = 5;\r\n  cities: ICity[] = [];\r\n  activeEvents: GameEvent[] = [];\r\n  _eventLog: GameEvent[] = [];\r\n  configs: any = {};\r\n\r\n  startGame(playerName: string) {\r\n    this.configs = {\r\n      ItemsConfig: {...ItemsConfig},\r\n      LocationsConfig: {...LocationsConfig},\r\n      GameEventsConfig: {...GameEventsConfig},\r\n   }\r\n\r\n    this.eraseSave();\r\n    this.day = 1;\r\n    this.activeEvents = [];\r\n    this._eventLog = [];\r\n    this.setupPlayer(playerName);\r\n    this.setupCities();\r\n    this.game = new Game(this.player);\r\n  };\r\n\r\n  saveGame() {\r\n    const saveDoc = {\r\n      player: this.player,\r\n      day: this.day,\r\n      cities: this.cities,\r\n      activeEvents: this.activeEvents,\r\n      eventLog: this._eventLog,\r\n      game: this.game\r\n    };\r\n    localStorage.setItem('saveDoc', JSON.stringify(saveDoc));\r\n  };\r\n\r\n  loadGame() {\r\n    const saveDoc = JSON.parse(localStorage.getItem('saveDoc')!);\r\n    if (!saveDoc) {\r\n      return;\r\n    }\r\n    this.player = new Player(saveDoc.player.name, saveDoc.player.money);\r\n    this.player.health = saveDoc.player.health;\r\n    this.player.inventory = new Inventory();\r\n    saveDoc.player.inventory.items.forEach((item: any) => {\r\n      this.player.inventory.addItem(new Item(item.name, item.value, item.description, item.quantity));\r\n    });\r\n    this.day = saveDoc.day;\r\n    this.cities = [];\r\n    saveDoc.cities.forEach((city: any) => {\r\n      const loadedCity = {\r\n        ...city,\r\n        inventory: new Inventory()\r\n      }\r\n      city.inventory.items.forEach((item: any) => {\r\n        loadedCity.inventory.addItem(new Item(item.name, item.value, item.description, item.quantity));\r\n      });\r\n      this.cities.push(loadedCity);\r\n    });\r\n    this.activeEvents = saveDoc.activeEvents;\r\n    this._eventLog = saveDoc.eventLog;\r\n    this.game = saveDoc.game;\r\n  }\r\n\r\n  eraseSave() {\r\n    localStorage.removeItem('saveDoc');\r\n  }\r\n\r\n  get eventLog() {\r\n    return this._eventLog.reverse();\r\n  }\r\n\r\n  get ending() {\r\n    if (this.player.health <= 0) {\r\n      return ENDINGS.DIED;\r\n    }\r\n    if (this.player.money >= 1000000) {\r\n      return ENDINGS.RICH;\r\n    }\r\n    if (this.player.money >= 100000) {\r\n      return ENDINGS.PAID;\r\n    }\r\n    return ENDINGS.INSOLVENT;\r\n  };\r\n\r\n  setupCities() {\r\n    this.cities = this.configs.LocationsConfig?.locations.map((location: ICity) => {\r\n      const newLocation = {\r\n        ...location,\r\n        inventory: new Inventory()\r\n      };\r\n      location.inventory?.items?.forEach((itemRef: any) => {\r\n        const item = this.configs.ItemsConfig?.items.find((i: any) => i.id === itemRef.id)!;\r\n        newLocation.inventory.addItem(new Item(item.name, item.value, item.description, itemRef.quantity));\r\n      });\r\n      return newLocation;\r\n    });\r\n  };\r\n\r\n  setupPlayer(playerName: string) {\r\n    this.player = new Player(playerName, 1000);\r\n    const bread = new Item('Bread', 5, 'A loaf of bread', 10, 7);\r\n    const tent = new Item('Tent', 1000, 'A warm, blood-soaked tent', 1, 1006);\r\n    const spear = new Item('Spear', 500, 'A sharp, pointy stick', 1, 1010);\r\n    const car = new Item('Personal Car', 10000, 'A great means of transportation', 1, 1011);\r\n    this.player.inventory.addItem(bread);\r\n    this.player.inventory.addItem(tent);\r\n    this.player.inventory.addItem(spear);\r\n    this.player.inventory.addItem(car);\r\n  };\r\n\r\n  getCurrentDay() {\r\n    return this.day;\r\n  };\r\n\r\n  produceMoreItems() {\r\n    this.cities.forEach((city) => {\r\n      const amountOfNewItems = Math.floor(Math.random() * 10);\r\n      for (let i = 0; i < amountOfNewItems; i++) {\r\n        const item = ItemsConfig.items[Math.floor(Math.random() * ItemsConfig.items.length)];\r\n        const newItem = new Item(item.name, item.value, item.description, Math.ceil(Math.random() * 10));\r\n        city.inventory.addItem(newItem);\r\n      }\r\n    });\r\n  }\r\n\r\n  advanceDay() {\r\n    this.day++;\r\n    try {\r\n      this.produceMoreItems();\r\n      this.generateEvents();\r\n    } catch (e) {\r\n      console.error('Error generating events', e);\r\n    }\r\n    this.saveGame();\r\n  };\r\n\r\n  generateEvents() {\r\n    const todayEventCount = Math.floor(Math.random() * this.dailyEventLimit);\r\n    if (this.activeEvents.length > 0 && this.day % 2 === 0) {\r\n      this.activeEvents.splice(this.activeEvents.length - 1, 1);\r\n    }\r\n    for (let i = 0; i < todayEventCount; i++) {\r\n      let eventConfig = this.configs.GameEventsConfig?.events[Math.floor(Math.random() * this.configs?.GameEventsConfig.events.length)];\r\n      let event = new GameEvent(eventConfig, this.day);\r\n      this.proccessEventEffect(event);\r\n      this._eventLog.push(event);\r\n    }\r\n  };\r\n\r\n  proccessEventEffect(event: GameEvent) {\r\n    let subject: ICity | Item | Player | undefined;\r\n    let target: ICity | Item | Player | undefined;\r\n    let effect = event.effect;\r\n    if (effect.type === EFFECT_TYPES.POVERTY || effect.type === EFFECT_TYPES.ABUNDANCE) {\r\n      subject = this.cities[Math.floor(Math.random() * this.cities.length)];\r\n      this.activeEvents = this.activeEvents.filter((e) => !((e.effect.subject?.name === subject?.name) && (e.effect.type === EFFECT_TYPES.POVERTY ? e.effect.type === EFFECT_TYPES.ABUNDANCE : e.effect.type === EFFECT_TYPES.POVERTY)));\r\n    } else if (effect.type === EFFECT_TYPES.SCARCITY || effect.type === EFFECT_TYPES.EXCESS) {\r\n      const index = Math.floor(Math.random() * ItemsConfig.items.length)\r\n      subject = ItemsConfig.items[index];\r\n\r\n      this.activeEvents = this.activeEvents.filter((e) => !((e.effect.subject?.name === subject?.name) && (e.effect.type === EFFECT_TYPES.SCARCITY ? e.effect.type === EFFECT_TYPES.EXCESS : e.effect.type === EFFECT_TYPES.SCARCITY)));\r\n    } else if (effect.type === EFFECT_TYPES.CITY_BUYING_X || effect.type === EFFECT_TYPES.CITY_SELLING_X) {\r\n      subject = this.cities[Math.floor(Math.random() * this.cities.length)];\r\n      target = ItemsConfig.items[Math.floor(Math.random() * ItemsConfig.items.length)];\r\n      const qty = Math.ceil((effect.type === EFFECT_TYPES.CITY_BUYING_X ? 1 : 20) * Math.random() + 2);\r\n      const seedItem = new Item(target.name, target.value, target.description, qty, target.id);\r\n      subject.inventory.addItem(seedItem);\r\n      this.activeEvents = this.activeEvents.filter((e) => !((e.effect.subject?.name === subject?.name) && (e.effect.type === EFFECT_TYPES.CITY_BUYING_X ? e.effect.type === EFFECT_TYPES.CITY_SELLING_X : e.effect.type === EFFECT_TYPES.CITY_BUYING_X)));\r\n    }\r\n    effect = {\r\n      ...effect,\r\n      subject: subject,\r\n      target: target\r\n    };\r\n    if(!effect.subject) {\r\n      console.log('THIS IS THE MISSING SUBJECT', subject);\r\n      console.log('effect', effect);\r\n      console.log('target', target);\r\n    }\r\n    event.setEffect(effect);\r\n    this.activeEvents.push(event);\r\n  }\r\n\r\n  isGameOver() {\r\n    return this.player.health <= 0 || this.day >= this.daysLimit;\r\n  };\r\n\r\n  resetGame() {\r\n    this.day = 0;\r\n  };\r\n\r\n  getCurrentLocalEconomy(location: ICity) {\r\n    const relevantEvents = this.activeEvents.filter((event) => {\r\n      let effect = event.effect;\r\n      return effect.subject === location || [EFFECT_TYPES.SCARCITY, EFFECT_TYPES.EXCESS].includes(effect.type);\r\n    });\r\n    this.updateLocationPrices(location, relevantEvents);\r\n    this.upstatePlayerPrices(relevantEvents);\r\n    this.reflectEconomicStatus(location, relevantEvents);\r\n    return location;\r\n  }\r\n\r\n  updateLocationPrices(location: ICity, relevantEvents: GameEvent[]) {\r\n    location.inventory.items.forEach((item: Item) => {\r\n      const effect = relevantEvents.find(e => e.effect.subject === item && e.effect.subject.id === item.id)?.effect;\r\n      const priceImpact = effect?.type === EFFECT_TYPES.SCARCITY ? 1.3 : effect?.type === EFFECT_TYPES.EXCESS ? 0.4 : 0.8;\r\n      item.cost = item.value * (priceImpact + Math.random());\r\n    });\r\n  }\r\n\r\n  upstatePlayerPrices(relevantEvents: GameEvent[]) {\r\n    this.player.inventory.items.forEach((item: Item) => {\r\n      const effect = relevantEvents.find(e => e.effect.subject === item && e.effect.subject.id === item.id)?.effect;\r\n      const priceImpact = effect?.type === EFFECT_TYPES.SCARCITY ? 1.3 : effect?.type === EFFECT_TYPES.EXCESS ? 0.4 : 0.8;\r\n      item.cost = item.value * (priceImpact + Math.random());\r\n    });\r\n  }\r\n\r\n  reflectEconomicStatus(location: ICity, relevantEvents: GameEvent[]) {\r\n    if (relevantEvents.find(e => e.effect.type === EFFECT_TYPES.CITY_BUYING_X)) {\r\n      let playerItem = this.player.inventory.items.find((item: Item) => item.id === relevantEvents.find(e => e.effect.type === EFFECT_TYPES.CITY_BUYING_X)?.effect.target?.id);\r\n      playerItem!.cost = playerItem?.cost! * (1.5 + Math.random());\r\n      let locationItem = location.inventory.items.find((item: Item) => item.id === relevantEvents.find(e => e.effect.type === EFFECT_TYPES.CITY_BUYING_X)?.effect.target?.id);\r\n      locationItem!.cost = locationItem?.cost! * (1.9 + Math.random());\r\n    }\r\n    if (relevantEvents.find(e => e.effect.type === EFFECT_TYPES.CITY_SELLING_X)) {\r\n      let event = relevantEvents.find(e => e.effect.type === EFFECT_TYPES.CITY_SELLING_X)!;\r\n      let relevantItem = ItemsConfig.items.find((item: Item) => item.id === event.effect.target?.id)\r\n      let playerItem = this.player.inventory.items.find((item: Item) => item.id === relevantItem?.id);\r\n      playerItem!.cost = playerItem?.cost! * (0.3 + Math.random());\r\n      let locationItem = location.inventory.items.find((item: Item) => item.id === relevantItem?.id);\r\n      let cost = relevantItem?.value! * (0.5 + Math.random());;\r\n      let qty = Math.ceil(5 * Math.random() + 2);\r\n      if (!locationItem) {\r\n        let excessItem = new Item(relevantItem?.name!, cost, relevantItem?.description!, qty, relevantItem?.id!);\r\n        location.inventory.addItem(excessItem);\r\n      }\r\n      locationItem!.cost = cost;\r\n      locationItem!.quantity = locationItem!.quantity! + qty;\r\n    }\r\n    if (relevantEvents.find(e => e.effect.type === EFFECT_TYPES.POVERTY)) {\r\n      location.inventory.items.forEach((item: Item) => {\r\n        item.cost = item.value * (0.25 + Math.random());\r\n      });\r\n      this.player.inventory.items.forEach((item: Item) => {\r\n        item.cost = item.value * (1.25 + Math.random());\r\n      });\r\n      location.money = location.size * 500 * (0.5 + Math.random());\r\n    }\r\n    if (relevantEvents.find(e => e.effect.type === EFFECT_TYPES.ABUNDANCE)) {\r\n      location.inventory.items.forEach((item: Item) => {\r\n        item.cost = item.value * (2 + Math.random());\r\n      });\r\n      this.player.inventory.items.forEach((item: Item) => {\r\n        item.cost = item.value * (0.5 + Math.random());\r\n      });\r\n      location.money = location.size * 2000 * (2 + Math.random());\r\n    }\r\n\r\n    location.money = location.money! + location.money! * 0.30 * (0.5 - Math.random());\r\n  }\r\n\r\n}\r\n",
            "accessors": {
                "eventLog": {
                    "name": "eventLog",
                    "getSignature": {
                        "name": "eventLog",
                        "type": "",
                        "returnType": "",
                        "line": 90
                    }
                },
                "ending": {
                    "name": "ending",
                    "getSignature": {
                        "name": "ending",
                        "type": "",
                        "returnType": "",
                        "line": 94
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "MusicService",
            "id": "injectable-MusicService-ed07612d61d31885f985df0863f0a4a72445948fbcf1a456942f63e4dbaaf227d4d708fdefa58404da5b19487d0006c7334bcbe6f8ea7d93ca95bedd633ab474",
            "file": "src/app/shared/music.service.ts",
            "properties": [
                {
                    "name": "currentMusic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "pauseMusic",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "playMusic",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Howl } from 'howler';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MusicService {\n\n  currentMusic: any;\n\n  constructor() { }\n\n  playMusic() {\n    if (!this.currentMusic) {\n      // this.currentMusic = new Howl({\n      //   src: ['../assets/music/' + 'main' + '.mp3'],\n      //   autoplay: true,\n      //   loop: true,\n      //   volume: 0.3,\n      // });\n    }\n    // this.currentMusic.play();\n  }\n\n  pauseMusic() {\n    if (this.currentMusic) {\n      this.currentMusic.pause();\n    }\n  }\n\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "Game",
            "id": "class-Game-f40f361a78f3a97d4945e96f74b258c2f1312bc2f414d0875e01cbb044e85805d88cea306ac67816567fa6e502ab9f830a70262005cad60b01d5ce3b18dc407e",
            "file": "src/app/game/Game.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Player } from \"./Player\";\n\nexport class Game {\n  player: Player;\n\n  constructor(player: Player) {\n    this.player = player;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "player",
                        "type": "Player",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "player",
                        "type": "Player",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "player",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Player",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GameEvents",
            "id": "class-GameEvents-02bca58d2cc03d965b12db0379e0ffa51a2cdb4c9655745e084743dac0d1f9976142bacdb1fbbaeef54073eec877f9bc948ce137f98f7c4169d1d25d2f9b26eb",
            "file": "src/app/game/GameEvents.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class GameEvents {\n  description!: string;\n  day!: number;\n  effect: any;\n\n  constructor(eventConfig: any, day: number) {\n    this.day = day;\n    this.description = eventConfig.description;\n    this.effect = eventConfig.effect;\n  }\n\n  setEffect(effect: any) {\n    this.effect = effect;\n    const subject = this.effect.subject;\n    const target = this.effect.target;\n    this.description = this.description.replace(/{{subject}}/g, subject.name).replace(/{{target}}/g, target?.name);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "eventConfig",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "day",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "eventConfig",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "day",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "day",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "effect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "setEffect",
                    "args": [
                        {
                            "name": "effect",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "effect",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Inventory",
            "id": "class-Inventory-88d0a21256979f4e913dd9fe3f217a88fbc6a29ba9d0c794050003111de0f7389a2225e04a0a348d33d4c33d56d1e9b88735f3af2a80139a39d5631101edbdb4",
            "file": "src/app/game/Inventory.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Item } from \"./Item\";\n\nexport class Inventory {\n  items: Item[] = [];\n\n  constructor() {\n    this.items = [];\n  }\n\n  // Calculate total value of the inventory\n  get totalValue() {\n    return this.items.reduce((acc, item) => acc + (item.cost! * item.quantity!), 0);\n  };\n\n  // Add an item to the inventory, if it already exists, increase the quantity\n  addItem(item: Item) {\n    let existingItem = this.items.find(i => i.name === item.name);\n    if (existingItem) {\n      existingItem.quantity! += item.quantity!;\n    } else {\n      this.items.push(item);\n    }\n  };\n\n  // Remove an item from the inventory, if it exists, decrease the quantity, if the quantity is 0, remove the item\n  removeItem(item: Item) {\n    let existingItem = this.items.find(i => i.name === item.name);\n    if (existingItem) {\n      existingItem.quantity! -= item.quantity!;\n      if (existingItem.quantity! <= 0) {\n        this.items = this.items.filter(i => i.name !== item.name);\n      }\n    }\n  };\n\n  //Update item in inventory\n  updateItem(item: Item) {\n    const existingItem = this.items.find(i => i.name === item.name);\n    const qty = item.quantity;\n    if (existingItem) {\n      if (qty === 0) {\n        this.items = this.items.filter(i => i.name !== item.name);\n      } else {\n        existingItem.quantity = item.quantity;\n      }\n    } else {\n      this.items.push(item);\n    }\n  };\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 4
            },
            "properties": [
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Item[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "addItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "accessors": {
                "totalValue": {
                    "name": "totalValue",
                    "getSignature": {
                        "name": "totalValue",
                        "type": "",
                        "returnType": "",
                        "line": 11
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Item",
            "id": "class-Item-b958684ba6a7788235bf0bf581e8132595d4b5ef2238c73c8ba423610d951de43ee3126bf6fc0eca43593d2c7d3b5a631f1b6a1213ed3a8bbf4fe84b3882c597",
            "file": "src/app/game/Item.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Item {\n  id?: number;\n  name: string;\n  cost?: number;\n  value: number;\n  description: string;\n  icon?: string;\n  quantity?: number;\n\n  constructor(name: string, value: number, description: string, quantity?: number, id?: number) {\n    this.name = name;\n    this.value = value;\n    this.cost = this.value; //item cost is initialized at 100% of value\n    this.description = description;\n    this.quantity = quantity || 0;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "description",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "quantity",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "description",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "quantity",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "cost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Location",
            "id": "class-Location-542cfb80c1fe8284b60c0bc1efbbb8ce6c609e0850a0eb62579f554b245b163a83d47427c7cf7661bd7bff339c3aa513f260218efb51de5b667daa7697613a30",
            "file": "src/app/game/Location.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import ICity from \"../utils/ICity.interface\";\nimport { Inventory } from \"./Inventory\";\n\nexport class Location implements ICity {\n  id!: number;\n  name!: string;\n  inventory?: Inventory;\n  x!: number;\n  y!: number;\n  size!: number;\n  money!: number;\n\n  constructor(id: number, name: string, x: number, y: number, size: number) {\n    this.id = id;\n    this.name = name;\n    this.x = x;\n    this.y = y;\n    this.size = size;\n  }\n\n  setInventory(inventory: Inventory) {\n    this.inventory = inventory;\n  };\n\n  setMoney(money: number) {\n    this.money = money;\n  };\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "size",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "size",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "inventory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Inventory",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "money",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "setInventory",
                    "args": [
                        {
                            "name": "inventory",
                            "type": "Inventory",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "inventory",
                            "type": "Inventory",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setMoney",
                    "args": [
                        {
                            "name": "money",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "money",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ICity"
            ]
        },
        {
            "name": "Player",
            "id": "class-Player-66653a46231e25e6ececce2601e45f2cceac96a82d75f6babf55e7f2df479428795ddd3c3954f178bbd8c8907dab9211a8a2e81a12efaeed75fa437056654b70",
            "file": "src/app/game/Player.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Inventory } from \"./Inventory\";\n\nexport class Player {\n  id = 0;\n  name: string;\n  inventory: Inventory = new Inventory();\n  money: number;\n  health: number = 3;\n\n  constructor(name: string, money?: number) {\n    this.name = name;\n    this.money = money ? money : 0;\n  }\n\n  get stealingChance() {\n    return 0.5;\n  }\n\n  setInventory(inventory: Inventory) {\n    this.inventory = inventory;\n  };\n\n  setMoney(money: number) {\n    this.money = money;\n  };\n\n  takeDamage(damage: number) {\n    this.health -= damage;\n  };\n\n  heal(heal: number) {\n    this.health += heal;\n  };\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "money",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "money",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "health",
                    "defaultValue": "3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "inventory",
                    "defaultValue": "new Inventory()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Inventory",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "money",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "heal",
                    "args": [
                        {
                            "name": "heal",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "heal",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setInventory",
                    "args": [
                        {
                            "name": "inventory",
                            "type": "Inventory",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "inventory",
                            "type": "Inventory",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setMoney",
                    "args": [
                        {
                            "name": "money",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "money",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "takeDamage",
                    "args": [
                        {
                            "name": "damage",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "damage",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "accessors": {
                "stealingChance": {
                    "name": "stealingChance",
                    "getSignature": {
                        "name": "stealingChance",
                        "type": "",
                        "returnType": "",
                        "line": 15
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-d6d406822e4517c2b33dbb58e228cb60487b82473601dfd2a26606ee64d6a1c01ee199be586348e8a62c9dfaa511dd761427914ed663bf9b634abebbfe2da3e3",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'Trade Runner'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "SharedModule",
                    "type": "module"
                },
                {
                    "name": "MapModule",
                    "type": "module"
                },
                {
                    "name": "StoryModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { MapModule } from './map/map.module';\r\nimport { SharedModule } from './shared/shared.module';\r\nimport { StoryModule } from './story/story.module';\r\nimport { MusicService } from './shared/music.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [SharedModule, MapModule, StoryModule, CommonModule, RouterOutlet],\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.scss'\r\n})\r\nexport class AppComponent {\r\n  title = 'Trade Runner';\r\n}\r\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<router-outlet></router-outlet>\r\n<div class=\"music-button\">\r\n  <!-- <app-music-button></app-music-button> -->\r\n</div>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-86e2311c54fbca7431c12e070d0fd5b0ebe343eec0553a392f182ba0e04a8f86613233d26ee47718fd0e7a65078f580c76a1fcc928ce55de81193d6618025bc4",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 798,
                            "end": 811,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 799,
                                "end": 807,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 35,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 49,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 51
                    }
                }
            }
        },
        {
            "name": "CreditsComponent",
            "id": "component-CreditsComponent-0eaeb3ed1b72168c23b905287f9c2803711a1346bee1688c03c356f24b3b67139f70868839575b9c4629d2384bb191d9737cee956dfbe9099d3e0f82e9d6d18b",
            "file": "src/app/story/credits/credits.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-credits",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./credits.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-credits',\r\n  templateUrl: './credits.component.html',\r\n  styleUrl: './credits.component.scss'\r\n})\r\nexport class CreditsComponent {\r\n\r\n  constructor(private router: Router) { }\r\n\r\n  handleBack() {\r\n    this.router.navigate(['menu']);\r\n  }\r\n}\r\n",
            "styleUrl": "./credits.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<main class=\"h-full w-full p-10 flex flex-col justify-between\">\r\n  <h1 class=\"mx-auto\">Credits</h1>\r\n  <section class=\"nes-container with-title is-dark flex flex-col\">\r\n    <p class=\"title\">Production</p>\r\n    <div>\r\n      Game Design: Guillermo Murúa  (<a href=\"https://github.com/Sanscripter\" target=\"_blank\" class=\"nes-text is-primary\">&#64;Sanscripter</a>)\r\n    </div>\r\n    <div>\r\n      Code: Guillermo Murúa (<a href=\"https://github.com/Sanscripter\" target=\"_blank\" class=\"nes-text is-primary\">&#64;Sanscripter</a>)\r\n    </div>\r\n  </section>\r\n  <section class=\"nes-container with-title is-dark flex flex-col\" >\r\n    <p class=\"title\">Assets</p>\r\n    <div>\r\n      <a href=\"https://www.publicdomainpictures.net/\" target=\"_blank\" class=\"nes-text is-primary\">\r\n        https://www.publicdomainpictures.net/ - Public Domain Pictures\r\n      </a>\r\n    </div>\r\n    <div>\r\n      <a href=\"https://opengameart.org/\" target=\"_blank\" class=\"nes-text is-primary\">\r\n        https://opengameart.org/ - Public Domain Game Art\r\n      </a>\r\n    </div>\r\n    <div>\r\n      <a href=\"https://unsplash.com/\" target=\"_blank\" class=\"nes-text is-primary\">\r\n        https://unsplash.com/ - Unsplash Free Use Pictures\r\n      </a>\r\n    </div>\r\n    <div>\r\n      <a href=\"https://www.goodfreephotos.com/\" target=\"_blank\" class=\"nes-text is-primary\">\r\n        https://www.goodfreephotos.com/ - Public Domain Pictures\r\n      </a>\r\n    </div>\r\n    <div>\r\n      <a href=\"https://www.chosic.com/\" target=\"_blank\" class=\"nes-text is-primary\">\r\n        https://www.chosic.com/ - Public Domain Music\r\n      </a>\r\n    </div>\r\n    <div>\r\n      <a href=\"https://giventofly.github.io/pixelit/\" target=\"_blank\" class=\"nes-text is-primary\">\r\n        https://giventofly.github.io/pixelit/ - pixelit to modify images to pixel art\r\n      </a>\r\n    </div>\r\n  </section>\r\n  <section class=\"nes-container with-title is-dark flex flex-col justify-between\" >\r\n    <p class=\"title\">Special Thanks</p>\r\n    <div>\r\n      <p class=\"nes-text is-warning pl-5\">Esther Campos Murúa</p> - for being an amazing wife and right by my side during the development\r\n    </div>\r\n    <div>\r\n      <p class=\"nes-text is-warning pl-5\">Kaique</p> - for brainstorming mechanics and visual ideas with me during some deep talks\r\n    </div>\r\n    <div>\r\n      <p class=\"nes-text is-warning pl-5\">FefoNeto</p> - for great UI review and ideas on the map (and being generally disgusting and punchable)\r\n    </div>\r\n  </section>\r\n  <section class=\"flex\">\r\n    <button class=\"nes-btn is-warning m-auto\" (click)=\"handleBack()\">Back</button>\r\n  </section>\r\n</main>\r\n"
        },
        {
            "name": "EndScreenComponent",
            "id": "component-EndScreenComponent-640f2ffcda0387b0bb06ce2faa48f4417d73e4866be46069fd791b4151f7bbbd5710cc12f3529a8fd7bcdf3fb1dbf83b623f8df98ccdbd88eece5ace295689c3",
            "file": "src/app/story/end-screen/end-screen.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-end-screen",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./end-screen.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ending",
                    "defaultValue": "ENDINGS.INSOLVENT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "endings",
                    "defaultValue": "ENDINGS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "gameService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameService",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleExit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { GameService } from '../../shared/game.service';\r\nimport { ENDINGS } from '../../game/Endings.enum';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-end-screen',\r\n  templateUrl: './end-screen.component.html',\r\n  styleUrl: './end-screen.component.scss'\r\n})\r\nexport class EndScreenComponent implements OnInit {\r\n\r\n  constructor(private router: Router, public gameService: GameService) { }\r\n\r\n  endings = ENDINGS;\r\n\r\n  ending: number = ENDINGS.INSOLVENT;\r\n\r\n  ngOnInit() {\r\n    this.gameService.loadGame();\r\n    this.ending = this.gameService.ending;\r\n  }\r\n\r\n  get player() {\r\n    return this.gameService.player;\r\n  }\r\n\r\n  handleExit() {\r\n    this.gameService.resetGame();\r\n    this.router.navigate(['menu']);\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./end-screen.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "player": {
                    "name": "player",
                    "getSignature": {
                        "name": "player",
                        "type": "",
                        "returnType": "",
                        "line": 24
                    }
                }
            },
            "templateData": "<main class=\"flex flex-col h-full justify-between m-auto p-10 w-full overflow-y-scroll\">\r\n  <section>\r\n    <h1 class=\"text-4xl p-5 text-center\">Game Over</h1>\r\n    <div class=\"p-5\">\r\n      @if (ending === endings.DIED) {\r\n      <p>You rest your face on the sand and feel every limb of your body go numb, one by one, from the extremities\r\n        inwards. You close your eyes and swallow in a vain attempt to hydrate your throat, as though you prepared to\r\n        state your case to a higher power to let you live. You present eloquently how much you still have to achieve,\r\n        what other lives you will impact, the justice you will bring and how you will honor your father's legacy. But,\r\n        alas, your silent inner-monologue falls on deaf ears and you feel the mantle of darkness cover you whole with,\r\n        putting a surprisingly tender end to a rough and unforgiving life.</p>\r\n      }\r\n      @else if (ending === endings.PAID) {\r\n      <p>As the 30th day gives in to the night, you return to the place where you first buried your father. Thirteen\r\n        lights rip through the night, getting closer. You count your money and ready an envelope. The riders stop around\r\n        the station but leave their engines running, except for one who hops off his motorbike and walks towards you. No\r\n        words, he just stands his hand in your general direction and you give him the money. He opens up. He counts.\r\n        Everything is there - but it's also everything you've got. \"You did good, kid.\", he says, \"Take it it easy for a\r\n        few days and we'll call you with your next assignment\". That takes you by surprise - your original understanding\r\n        was that after the debt was paid you'd be free to go your own way. \"We are going to have a prosperous future\r\n        together\", the man continues, raising his hand again expecting you to shake it, \"what do you say?\". You consider\r\n        spitting on it or turning away or at the very least saying \"No\" but you quicly look around: they came in numbers\r\n        and are all well armed. You are in no position to refuse, because of the implication. You shake hands, they\r\n        leave setting dust off in the air. You sit on the ground, near your father's grave and spend the night awake\r\n        looking at the horizon. That line, that perimiter where the sky clashed with the edge of Happy Valley, that line\r\n        became the fence around the rest of your life. You watch the sun rise but it feels indistinguishable from a cell\r\n        now. </p>\r\n      }\r\n      @else if (ending === endings.RICH) {\r\n      <p>The day has come. You set up a meeting with the leader of Los Treze in the same place your father was once\r\n        burried. He arrives early. You never do. Instead, using your newly accumulated wealth, you hire 7 mercenaries as\r\n        a welcome comitee. You never learn just quite what happened that day, only that the Los Treze dissolved shortly\r\n        after and the mercenaries assured you nobody would be messing with you anymore. With the remaining wealth you\r\n        are able to recruit some survivors from around Happy Valley and found a settlement of your own. Over the years,\r\n        as civilisation regrows, it becomes the capital of the first democratic proto-state of the New World and your\r\n        natural ability as a trader becomes instrumental in bringing abundance and prosperity to the region.</p>\r\n      }\r\n      @else if (ending === endings.INSOLVENT) {\r\n      <p>Days go by and before you realize the sun sets on the 30th day. You know you are short and you consider\r\n        running,\r\n        leaving Happy Valley, taking a chance somewhere else. Unfortunately, by the time you settled on a plan and hit\r\n        the\r\n        road with what you have, a van followed by 12 motrocylcles finds and ambushes you. No words are exchanged - none\r\n        are needed. You resign to your fate and let them put you on the back of the van. The last thing you see in life\r\n        is\r\n        the start-sprangled night sky through the van's window, upside-down, 2-inches away from the rest of your bruised\r\n        body.</p>\r\n      }\r\n    </div>\r\n  </section>\r\n  <section class=\"nes-container with-title is-dark w-full\">\r\n    <p class=\"title\">Stats</p>\r\n    <app-agent-stats [stats]=\"player\" [day]=\"gameService.getCurrentDay()\"></app-agent-stats>\r\n  </section>\r\n  <section class=\"flex flex-row w-full mt-5\">\r\n    <button class=\"nes-btn is-error m-auto\" (click)=\"handleExit()\">Exit</button>\r\n  </section>\r\n</main>\r\n"
        },
        {
            "name": "EventlogComponent",
            "id": "component-EventlogComponent-1057c7b7fa0abd7833c1def0ed5a111774be488cd9578036f43475904a498201ff0a353193537128ef37bd313534ef19e9700558ae5d64f19c76905c45dc2844",
            "file": "src/app/shared/eventlog/eventlog.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-eventlog",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./eventlog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "day",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "eventLog",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "GameEvents[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getHeat",
                    "args": [
                        {
                            "name": "event",
                            "type": "GameEvents",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "GameEvents",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, input } from '@angular/core';\r\nimport { GameEvents } from '../../game/GameEvents';\r\n\r\n@Component({\r\n  selector: 'app-eventlog',\r\n  templateUrl: './eventlog.component.html',\r\n  styleUrl: './eventlog.component.scss',\r\n  changeDetection:ChangeDetectionStrategy.OnPush\r\n})\r\nexport class EventlogComponent {\r\n\r\n  @Input() eventLog: GameEvents[] = [];\r\n  @Input() day: number = 1;\r\n\r\n  getHeat(event: GameEvents): any {\r\n    const age = this.day - event.day;\r\n    if (age === 0) {\r\n      return { 'is-error': true };\r\n    }\r\n    if (age < 2) {\r\n      return { 'is-warning': true };\r\n    }\r\n    return { 'is-primary': true };\r\n  }\r\n}\r\n",
            "styleUrl": "./eventlog.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"flex flex-col w-full h-full\">\r\n  @if (eventLog.length > 0) {\r\n  <p>Events: {{eventLog.length}}</p>\r\n  <div class=\"flex flex-col h-full overflow-y-scroll pt-2\">\r\n    @for (event of eventLog; track $index) {\r\n    <span class=\"nes-text\" [ngClass]=\"getHeat(event)\">{{event.description}} - day {{event.day}}</span>\r\n    <hr class=\"w-full\">\r\n    }\r\n  </div>\r\n  }\r\n</div>\r\n\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-cad94b233ec8e80ceb541e7972c5f9737e08237b4e137112f3987ca48ee0cce5c0d57798d41daa5d4d24d6bdbb2df1606ab68cca2aa0a1785e38f99f3cac0729",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HealthComponent",
            "id": "component-HealthComponent-a674522c7a2be5302a1a5b600af09b8ec388ff8034842c711c6bae4712bf2c1ad64430cb55eecc3eba977e134f1badac21292a3d71f5b45e0a81c8c9745c1c3b",
            "file": "src/app/shared/health/health.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-health",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./health.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "health",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-health',\r\n  templateUrl: './health.component.html',\r\n  styleUrl: './health.component.scss'\r\n})\r\nexport class HealthComponent {\r\n\r\n  @Input() health!: number;\r\n\r\n  get healthArray() {\r\n    return new Array(this.health);\r\n  }\r\n}\r\n",
            "styleUrl": "./health.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "healthArray": {
                    "name": "healthArray",
                    "getSignature": {
                        "name": "healthArray",
                        "type": "",
                        "returnType": "",
                        "line": 12
                    }
                }
            },
            "templateData": "<div class=\"flex flex-row\" >\r\n    <i *ngFor=\"let item of healthArray\" class=\"nes-icon heart\"></i>\r\n</div>\r\n"
        },
        {
            "name": "InteractiveViewComponent",
            "id": "component-InteractiveViewComponent-6c0b15afcf563cfb749bcba0a3b112cb0e3d7054a925b2ce86586932b4d371249a4a5f57861057fe0d9ae29f51019d7c162970a786d9494b0599cb99ab12fa81",
            "file": "src/app/map/interactive-view/interactive-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-interactive-view",
            "styleUrls": [
                "./interactive-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./interactive-view.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "cities",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "ICity[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "travelledTo",
                    "defaultValue": "new EventEmitter<ICity>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "canvas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLCanvasElement",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "canvasCtx",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanvasRenderingContext2D | null",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "fabricCanvas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fabric.Canvas",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "mouseUp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "renderCities",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\r\nimport { fabric } from 'fabric';\r\nimport ICity from '../../utils/ICity.interface';\r\n\r\n@Component({\r\n  selector: 'app-interactive-view',\r\n  templateUrl: './interactive-view.component.html',\r\n  styleUrls: ['./interactive-view.component.scss']\r\n})\r\nexport class InteractiveViewComponent implements AfterViewInit {\r\n\r\n  canvasCtx: CanvasRenderingContext2D | null = null;\r\n  canvas!: HTMLCanvasElement;\r\n  fabricCanvas!: fabric.Canvas;\r\n  mouseUp: any;\r\n\r\n\r\n  @Input() cities: ICity[] = [];\r\n\r\n  @Output() travelledTo = new EventEmitter<ICity>();\r\n\r\n  ngAfterViewInit(): void {\r\n    this.fabricCanvas = new fabric.Canvas('interactiveViewCanvas', {\r\n      backgroundColor: 'black',\r\n      selection: false,\r\n      preserveObjectStacking: true,\r\n    });\r\n    this.fabricCanvas.setWidth(window.innerWidth);\r\n    this.fabricCanvas.setHeight(window.innerHeight);\r\n    this.fabricCanvas.setBackgroundImage('assets/map.png', ()=> {this.fabricCanvas.renderAll()});\r\n    this.renderCities();\r\n  }\r\n\r\n  renderCities() {\r\n    if (!this.fabricCanvas) return;\r\n\r\n    this.cities.forEach((city) => {\r\n      const rect = new fabric.Rect({\r\n        top: city.y,\r\n        left: city.x,\r\n        width: city.size * .6 + 10,\r\n        height: city.size * .7 + 10,\r\n        fill: 'black',\r\n        stroke : 'white',\r\n        borderColor: 'white',\r\n        selectable: false,\r\n        hasBorders: false,\r\n        hoverCursor:'pointer'\r\n      });\r\n\r\n      const name = new fabric.Text(city.name, {\r\n        top: city.y + rect.height! + 10,\r\n        left: city.x - rect.width! * .5,\r\n        fill: 'white',\r\n        width: rect.width,\r\n        fontFamily: 'Press Start 2P',\r\n        fontSize: 12,\r\n        textAlign: 'center',\r\n        hoverCursor: 'pointer'\r\n      })\r\n\r\n      rect.on('mousedown', () => {\r\n        this.travelledTo.emit(city);\r\n      });\r\n      this.fabricCanvas.add(rect, name);\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./interactive-view.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "  <canvas id=\"interactiveViewCanvas\"></canvas>\r\n"
        },
        {
            "name": "InventoryComponent",
            "id": "component-InventoryComponent-afa71a9c77b99a0da3282774bdc7524e245e3216a80b5662fa0e9330e8a944eb13fdc992b5107003bd0ce1275862add2b646ddf9329303c82ea675fafa620f4f",
            "file": "src/app/shared/inventory/inventory.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-inventory",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./inventory.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "inventory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "Inventory",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'overworld'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "\"agent\" | \"overworld\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<Inventory>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "inventoryForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup | undefined",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "changedAmount",
                    "args": [
                        {
                            "name": "currentAmount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentAmount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitChange",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, Output, EventEmitter, DoCheck, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { Inventory } from '../../game/Inventory';\r\nimport { FormArray, FormBuilder, FormGroup } from '@angular/forms';\r\nimport { Item } from '../../game/Item';\r\n\r\n@Component({\r\n  selector: 'app-inventory',\r\n  templateUrl: './inventory.component.html',\r\n  styleUrl: './inventory.component.scss'\r\n})\r\nexport class InventoryComponent {\r\n\r\n  @Input() inventory?: Inventory;\r\n  @Input() mode: 'agent' | 'overworld' = 'overworld'; //ignore this\r\n  @Output() change = new EventEmitter<Inventory>();\r\n\r\n  inventoryForm: FormGroup | undefined;\r\n\r\n  constructor(private fb: FormBuilder) { }\r\n\r\n  ngOnInit() {\r\n    this.inventoryForm = this.fb.group({\r\n      items: this.fb.array([])\r\n    });\r\n    this.inventory?.items.forEach(item => {\r\n      (this.inventoryForm!.controls['items'] as FormArray)!.push(\r\n        this.fb.group({\r\n          ...item,\r\n          quantity: this.fb.control(item.quantity),\r\n          currentMax: item.quantity\r\n        })\r\n      );\r\n    });\r\n\r\n  }\r\n\r\n  get items() {\r\n    return this.inventoryForm!.get('items') as FormArray<FormGroup>;\r\n  }\r\n\r\n  get displayHandlers() {\r\n    return this.mode === 'agent';\r\n  }\r\n\r\n  changedAmount(currentAmount: number, index: number) {\r\n    const selected  = this.inventory?.items[index];\r\n    const changedAmount = selected!.quantity! - currentAmount;\r\n    const changed = new Item(selected!.name, selected!.cost!, selected!.description, changedAmount);\r\n    this.emitChange(changed);\r\n  }\r\n\r\n  emitChange(item: any) {\r\n    this.change.emit(item);\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./inventory.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "items": {
                    "name": "items",
                    "getSignature": {
                        "name": "items",
                        "type": "",
                        "returnType": "",
                        "line": 37
                    }
                },
                "displayHandlers": {
                    "name": "displayHandlers",
                    "getSignature": {
                        "name": "displayHandlers",
                        "type": "",
                        "returnType": "",
                        "line": 41
                    }
                }
            },
            "templateData": "<div class=\"w-full\" style=\"font-size: x-small;\">\r\n  <p>Inventory:</p>\r\n  <div class=\"nes-table-responsive\">\r\n    <form [formGroup]=\"inventoryForm!\">\r\n      <table formArrayName=\"items\" class=\"nes-table is-dark\">\r\n        <thead>\r\n          <tr>\r\n            <th>Item Name</th>\r\n            <th>Cost</th>\r\n            <th>Qty.</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody *ngFor=\"let itemForm of items.controls; let i = index\">\r\n          <tr [formGroup]=\"itemForm\">\r\n            <td>{{itemForm.value.name!}}</td>\r\n            <td class=\"whitespace-nowrap text-right\">{{itemForm.value.cost | currency:'USD'}}</td>\r\n            <td class=\"text-right whitespace-nowrap flex justify-end content-center items-center\">\r\n\r\n              @if (displayHandlers) {\r\n              <app-item-amount-input (change)=\"changedAmount($event,i)\" [currentMax]=\"itemForm.value.currentMax!\" class=\"w-full\"\r\n                formControlName=\"quantity\"></app-item-amount-input>\r\n              } @else {\r\n              <p>{{itemForm.value.quantity!}}</p>\r\n              }\r\n\r\n\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </form>\r\n\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ItemAmountInputComponent",
            "id": "component-ItemAmountInputComponent-eda5f0194b90eedb0c57d04a9fd41076614e5ed9087c8d5f43cca211f5ba8de07e98ec5b27dc78c4d954112dfe7a025de9db2e396f914db8e9a753ab8fb08e8f",
            "file": "src/app/shared/item-amount-input/item-amount-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, multi: true, useExisting: ItemAmountInputComponent\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, multi: true, useExisting: ItemAmountInputComponent\n}",
                    "type": "component"
                }
            ],
            "selector": "app-item-amount-input",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./item-amount-input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "currentMax",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "value",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "decrease",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "increase",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "onChange",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "onChange",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "onTouched",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "onTouched",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { FormGroup, FormBuilder, FormControl, ControlValueAccessor, NG_VALUE_ACCESSOR, AbstractControl, ValidationErrors, NG_VALIDATORS, Validator } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-item-amount-input',\r\n  templateUrl: './item-amount-input.component.html',\r\n  styleUrl: './item-amount-input.component.scss',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      multi: true,\r\n      useExisting: ItemAmountInputComponent\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      multi: true,\r\n      useExisting: ItemAmountInputComponent\r\n    }\r\n  ]\r\n})\r\nexport class ItemAmountInputComponent implements ControlValueAccessor, Validator {\r\n\r\n  onChange = (value: number) => { };\r\n  onTouched = () => { };\r\n  touched = false;\r\n  disabled = false;\r\n\r\n  @Input() currentMax: number = 1;\r\n  @Output() change = new EventEmitter<number>();\r\n\r\n  value: number = 0;\r\n\r\n  constructor() { }\r\n\r\n  writeValue(value: number): void {\r\n    this.value = value;\r\n  }\r\n  registerOnChange(onChange: any) {\r\n    this.onChange = onChange;\r\n  }\r\n  registerOnTouched(onTouched: any) {\r\n    this.onTouched = onTouched;\r\n  }\r\n\r\n  markAsTouched() {\r\n    if (!this.touched) {\r\n      this.onTouched();\r\n      this.touched = true;\r\n    }\r\n  }\r\n\r\n  setDisabledState(disabled: boolean) {\r\n    this.disabled = disabled;\r\n  }\r\n\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    const quantity = control.value;\r\n    if (quantity <= 0) {\r\n      return {\r\n        mustBePositive: {\r\n          quantity\r\n        }\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  increase() {\r\n    this.markAsTouched();\r\n    this.value = this.value + 1;\r\n    this.onChange(this.value);\r\n    this.change.emit(this.value);\r\n  }\r\n\r\n  decrease() {\r\n    this.markAsTouched();\r\n    this.value = this.value - 1;\r\n    this.onChange(this.value);\r\n    this.change.emit(this.value);\r\n  }\r\n\r\n\r\n}\r\n",
            "styleUrl": "./item-amount-input.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 31
            },
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "Validator"
            ],
            "templateData": "<div class=\"w-full flex flex-row flex-nowrap justify-between text-right whitespace-nowrap content-center items-center\">\r\n  @if (currentMax > value) {\r\n  <button (click)=\"increase()\" class=\"nes-btn is-success\">+</button>\r\n  }\r\n  {{value}}\r\n  @if (value > 0) {\r\n  <button (click)=\"decrease()\" class=\"nes-btn is-primary\">-</button>\r\n  }\r\n</div>\r\n"
        },
        {
            "name": "LoadMenuComponent",
            "id": "component-LoadMenuComponent-6070e74ba0e93f385142e9273ce9c70b9563387d7f8b4b423c8b9436784dd17a1613541fe11100f9e388639a8e20cd0d83f0ba3148d60c8f2dea42838c419ae6",
            "file": "src/app/menu/load-menu/load-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-load-menu",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./load-menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-load-menu',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './load-menu.component.html',\r\n  styleUrl: './load-menu.component.scss'\r\n})\r\nexport class LoadMenuComponent {\r\n\r\n}\r\n",
            "styleUrl": "./load-menu.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>load-menu works!</p>\r\n"
        },
        {
            "name": "LocationComponent",
            "id": "component-LocationComponent-a4fff8e97e13359e0758a988b34464f34ac99aa8e91a3a854414cec18c20555da37790db3634ea84d017945229fafe019cc55e94020879c468934b334ee57e6a",
            "file": "src/app/map/location/location.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-location",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./location.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "gameService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameService",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "lackOfFunds",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "locationId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "notEnoughMoney",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "playerSells",
                    "defaultValue": "new Inventory()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "stealFailed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "stealMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "stealSuccess",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "stolenItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Item",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "tradeEnabled",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "tradeMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "traderSells",
                    "defaultValue": "new Inventory()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "cancelMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "checkTrade",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "enableTrade",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleGoBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handlePlayerSell",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleStealing",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleTrade",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleTraderSell",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startStealing",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startTrade",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "transferMoney",
                    "args": [
                        {
                            "name": "from",
                            "type": "Player | ICity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "to",
                            "type": "Player | ICity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "amount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "from",
                            "type": "Player | ICity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "to",
                            "type": "Player | ICity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "amount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { GameService } from '../../shared/game.service';\r\nimport ICity from '../../utils/ICity.interface';\r\nimport { Inventory } from '../../game/Inventory';\r\nimport { Player } from '../../game/Player';\r\nimport { Item } from '../../game/Item';\r\n\r\n@Component({\r\n  selector: 'app-location',\r\n  templateUrl: './location.component.html',\r\n  styleUrl: './location.component.scss'\r\n})\r\nexport class LocationComponent implements OnInit {\r\n\r\n  locationId!: number;\r\n  playerSells = new Inventory();\r\n  traderSells = new Inventory();\r\n  tradeMode = false;\r\n  notEnoughMoney = false;\r\n  tradeEnabled = true;\r\n  lackOfFunds = false;\r\n  stealSuccess = false;\r\n  stealFailed = false;\r\n  stealMode = false;\r\n  stolenItem?: Item;\r\n\r\n  constructor(private router: Router, private route: ActivatedRoute, public gameService: GameService) { }\r\n\r\n  ngOnInit() {\r\n    this.gameService.loadGame();\r\n    this.route.queryParams.subscribe((qp: any) => {\r\n      this.locationId = qp['id'];\r\n    });\r\n    this.trader = this.gameService.getCurrentLocalEconomy(this.trader);\r\n  }\r\n\r\n  get player() {\r\n    return this.gameService.player;\r\n  };\r\n\r\n  get trader() {\r\n    return this.gameService.cities.find(c => c.id == this.locationId)!;\r\n  };\r\n\r\n  set trader(trader: ICity) {\r\n    this.gameService.cities = this.gameService.cities.map(c => c.id === trader.id ? trader : c);\r\n  };\r\n\r\n  get bark() {\r\n    return this.trader.barks![Math.floor(Math.random() * this.trader.barks!.length)];\r\n  }\r\n\r\n  get playerInventory() {\r\n    return Object.assign({}, this.player.inventory);\r\n  }\r\n\r\n  get traderInventory() {\r\n    return Object.assign({}, this.trader.inventory);\r\n  }\r\n\r\n  handleGoBack() {\r\n    this.gameService.advanceDay();\r\n    if (this.gameService.isGameOver()) {\r\n      this.router.navigate(['end']);\r\n      return;\r\n    }\r\n    this.router.navigate(['map']);\r\n  }\r\n\r\n  handlePlayerSell(event: any) {\r\n    this.playerSells.updateItem(event);\r\n    this.checkTrade();\r\n  }\r\n\r\n  handleTraderSell(event: any) {\r\n    this.traderSells.updateItem(event);\r\n    this.checkTrade();\r\n  }\r\n\r\n  checkTrade() {\r\n    this.tradeEnabled = true;\r\n    this.notEnoughMoney = false;\r\n    this.lackOfFunds = false;\r\n    const playerValue = this.playerSells.totalValue;\r\n    const traderValue = this.traderSells.totalValue;\r\n    if (playerValue > (this.trader.money! + traderValue)) {\r\n      this.lackOfFunds = true;\r\n      this.tradeEnabled = false;\r\n      return;\r\n    }\r\n    if (traderValue > (this.player.money! + playerValue)) {\r\n      this.notEnoughMoney = true;\r\n      this.tradeEnabled = false;\r\n      return;\r\n    }\r\n  }\r\n\r\n  startTrade() {\r\n    this.tradeMode = true;\r\n  }\r\n\r\n  startStealing() {\r\n    this.stealMode = true;\r\n  }\r\n\r\n  handleStealing() {\r\n    this.stealMode = true;\r\n    if (Math.random() > this.player.stealingChance!){\r\n      const randomItem = this.trader.inventory!.items[Math.floor(Math.random() * this.trader.inventory!.items.length)] as Item;\r\n      console.log('random',randomItem);\r\n      const randomQty = 1; //In the future we can add a random quantity\r\n      this.stolenItem = new Item(randomItem.name, randomItem?.cost!, randomItem.description, randomQty);\r\n      this.player.inventory.addItem(this.stolenItem);\r\n      this.trader.inventory!.removeItem(this.stolenItem);\r\n      this.stealSuccess = true;\r\n    } else {\r\n      this.player.takeDamage(Math.ceil(this.trader.size! * Math.random()/2));\r\n      this.stealFailed = true;\r\n    }\r\n\r\n  }\r\n\r\n  handleTrade() {\r\n    //If it's positive add to player wallet and remove from trader wallet\r\n    //If it's negative do the opposite\r\n    const netTrasactionValue = this.playerSells.totalValue - this.traderSells.totalValue;\r\n    netTrasactionValue > 0 ? this.transferMoney(this.trader, this.player, netTrasactionValue) : this.transferMoney(this.player, this.trader, -netTrasactionValue);\r\n    // trasfer items\r\n    this.playerSells.items.forEach(item => {\r\n      this.player.inventory!.removeItem(item);\r\n      this.trader.inventory!.addItem(item);\r\n    });\r\n    this.traderSells.items.forEach(item => {\r\n      this.trader.inventory!.removeItem(item);\r\n      this.player.inventory!.addItem(item);\r\n    });\r\n    this.playerSells.items = [];\r\n    this.traderSells.items = [];\r\n    this.player.inventory.items = this.player.inventory.items.slice(0);\r\n    this.trader.inventory!.items = this.trader.inventory!.items.slice(0);\r\n    this.tradeMode = false;\r\n  }\r\n\r\n  transferMoney(from: Player | ICity, to: Player | ICity, amount: number) {\r\n    const contrainedValue = Math.min(from.money!, amount);\r\n    from.money! -= contrainedValue;\r\n    to.money! += contrainedValue;\r\n  }\r\n\r\n  cancelMode() {\r\n    this.tradeMode = false;\r\n    this.notEnoughMoney = false;\r\n    this.stealMode = false;\r\n    this.stealSuccess = false;\r\n    this.stealFailed = false;\r\n    this.enableTrade();\r\n    this.playerSells.items = [];\r\n    this.traderSells.items = [];\r\n  }\r\n\r\n  enableTrade() {\r\n    this.tradeEnabled = true;\r\n    this.lackOfFunds = false;\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./location.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "player": {
                    "name": "player",
                    "getSignature": {
                        "name": "player",
                        "type": "",
                        "returnType": "",
                        "line": 38
                    }
                },
                "trader": {
                    "name": "trader",
                    "setSignature": {
                        "name": "trader",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "trader",
                                "type": "ICity",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 46,
                        "jsdoctags": [
                            {
                                "name": "trader",
                                "type": "ICity",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "trader",
                        "type": "",
                        "returnType": "",
                        "line": 42
                    }
                },
                "bark": {
                    "name": "bark",
                    "getSignature": {
                        "name": "bark",
                        "type": "",
                        "returnType": "",
                        "line": 50
                    }
                },
                "playerInventory": {
                    "name": "playerInventory",
                    "getSignature": {
                        "name": "playerInventory",
                        "type": "",
                        "returnType": "",
                        "line": 54
                    }
                },
                "traderInventory": {
                    "name": "traderInventory",
                    "getSignature": {
                        "name": "traderInventory",
                        "type": "",
                        "returnType": "",
                        "line": 58
                    }
                }
            },
            "templateData": "<main class=\"h-full\">\r\n  <!-- <p class=\"bg-black z-10 text-center w-full\">{{location.name}}</p> -->\r\n  <div class=\"flex flex-row w-full h-full justify-between\">\r\n    <img class=\"w-full h-full z-0 absolute\" [src]=\"trader.background\" style=\"transform:scaleX(-1);\" alt=\"\">\r\n    <aside class=\"flex flex-col w-1/4 nes-container is-dark p-2 !mb-auto trade-container\">\r\n      <app-agent-stats [stats]=\"gameService.player!\" [day]=\"gameService.getCurrentDay()\" />\r\n      @if (tradeMode || stealMode) {\r\n      <app-inventory [inventory]=\"playerInventory\" (change)=\"handlePlayerSell($event)\" mode=\"agent\" class=\"pt-10\" />\r\n      }\r\n    </aside>\r\n    <section class=\"flex w-full h-full text-center\">\r\n      <div class=\" w-full\">\r\n        <div class=\"flex flex-col h-full justify-between\">\r\n          <div class=\"dialog flex flex-row p-1 justify-end nes-container is-dark !bg-black\">\r\n            <div class=\"text-left content-end flex p-10\">\r\n              @if (notEnoughMoney) {\r\n              <p class=\"is-waring\">You don't have enough money.</p>\r\n              }\r\n              @else if (stealSuccess) {\r\n              <p class=\"is-success\">Uh? What was that?</p>\r\n              }\r\n              @else if (stealFailed) {\r\n              <p class=\"is-success\">Hey give that back! I'll kill you!</p>\r\n              }\r\n              @else if (lackOfFunds) {\r\n              <p class=\"is-waring\">We can trade but that's all I have. ({{trader.money! | currency: 'USD'}})</p>\r\n              <button class=\"nes-btn is-warning\" (click)=\"enableTrade()\">Ok</button>\r\n              } @else {\r\n              <p>{{bark || \"I'm out of words today\"}}</p>\r\n              }\r\n            </div>\r\n            <img class=\"trader-icon\" [src]=\"trader.traderMugshot\">\r\n\r\n          </div>\r\n\r\n          @if (stealMode) {\r\n          <div class=\"nes-container !bg-black is-dark flex flex-col justify-between h-1/2 !mb-auto\">\r\n            <p class=\"text-white !mb-10\">You wait until the trader looks away. You might have a chance to steal and get\r\n              away with it...</p>\r\n\r\n            @if (stealSuccess) {\r\n            <p class=\"text-white !mb-10\">You stole:</p>\r\n            <div class=\"my-5 w-full\">\r\n              <p class=\"text-lg\">{{stolenItem!.name}} x{{stolenItem!.quantity}}</p>\r\n              <p class=\"text-xs\">{{stolenItem!.description}}</p>\r\n              <hr class=\"w-full\">\r\n            </div>\r\n            <button class=\"nes-btn is-warning w-1/3\" (click)=\"cancelMode()\">Ok</button>\r\n            }\r\n            @if (stealFailed) {\r\n            <p class=\"text-white !mb-10\">You were caught stealing. The trader will attack you.</p>\r\n            <button class=\"nes-btn is-warning w-1/3\" (click)=\"handleGoBack()\">Ok</button>\r\n            }\r\n          </div>\r\n          }\r\n          @if (tradeMode) {\r\n          <div class=\"nes-container !bg-black is-dark flex flex-row justify-between h-1/2 !mb-auto\">\r\n            <div class=\"flex flex-col w-5/6\">\r\n              <p class=\"text-white !mb-10\">Your offer</p>\r\n              <div class=\"flex flex-row overflow-y-scroll !mb-10\">\r\n                <div class=\"text-left w-full\">\r\n                  <div *ngFor=\"let item of playerSells.items\" class=\"my-5 w-full\">\r\n                    <p class=\"text-lg\">{{item.name}} x{{item.quantity}}</p>\r\n                    <p class=\"text-xs\">{{item.description}}</p>\r\n                    <hr class=\"w-full\">\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <p class=\"text-xl text-left\">{{playerSells.totalValue | currency: 'USD'}}</p>\r\n            </div>\r\n\r\n            <div class=\"left-1/2 mx-1 w-0.5 h-full bg-white\"></div>\r\n\r\n            <div class=\"flex flex-col w-5/6\">\r\n              <p class=\"text-white !mb-10\">Trader's offer</p>\r\n              <div class=\"flex flex-row overflow-y-scroll justify-end !mb-10\">\r\n                <div class=\"text-right w-full\">\r\n                  <div *ngFor=\"let item of traderSells.items\" class=\"my-5 w-full\">\r\n                    <p class=\"text-lg\">{{item.name}} x{{item.quantity}}</p>\r\n                    <p class=\"text-xs\">{{item.description}}</p>\r\n                    <hr class=\"w-full\">\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <p class=\"text-xl text-right\">{{traderSells.totalValue | currency: 'USD'}}</p>\r\n            </div>\r\n          </div>\r\n          }\r\n          <div class=\"mx-auto mb-12 w-1/2 pb-0 flex flex-row flex-wrap\">\r\n            <button type=\"button\" (click)=\"tradeMode ? handleTrade() : startTrade()\" [hidden]=\"stealMode\"\r\n              class=\"nes-btn bg-blue-500 text-3xl m-auto mb-3\" [disabled]=\"!tradeEnabled\"\r\n              [ngClass]=\"{'is-disabled':!tradeEnabled}\">Trade</button>\r\n            <button type=\"button\" class=\"nes-btn bg-red-500 text-3xl m-auto mb-3\"\r\n              (click)=\"stealMode ? handleStealing() : startStealing()\" [hidden]=\"tradeMode || stealSuccess || stealFailed\">Steal</button>\r\n            <button type=\"button\" class=\"nes-btn bg-yellow-300 text-3xl m-auto mb-3\" (click)=\"cancelMode()\"\r\n              [hidden]=\"!tradeMode && !stealMode || stealSuccess || stealFailed\">Cancel</button>\r\n            <button type=\"button\" class=\"nes-btn bg-yellow-300 text-3xl m-auto mt-3\" (click)=\"handleGoBack()\"\r\n              [hidden]=\"tradeMode || stealMode\">Leave</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    </section>\r\n    <aside class=\"flex flex-col w-1/4 nes-container is-dark p-2 !mb-auto trade-container\">\r\n      <app-agent-stats [stats]=\"trader\" />\r\n      @if (tradeMode || stealMode) {\r\n      <app-inventory [inventory]=\"traderInventory\" (change)=\"handleTraderSell($event)\" mode=\"agent\" class=\"pt-10\" />\r\n      }\r\n    </aside>\r\n  </div>\r\n</main>\r\n"
        },
        {
            "name": "MainMenuComponent",
            "id": "component-MainMenuComponent-332814b8336d70fae71c09d4c5c0300411e814f29cbe65a1f872ba04aa85d6331ba9f32da796d7aae2562d8c6085113428a7673fe0f60de1af163dfd64cbc9f4",
            "file": "src/app/menu/main-menu/main-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-menu",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./main-menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "MENU_OPTIONS",
                    "defaultValue": "{\r\n    'start': () => this.handleStart(),\r\n    'credits': () => this.router.navigate(['credits']),\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | any>",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "version",
                    "defaultValue": "packageJson.version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "handleMenuOption",
                    "args": [
                        {
                            "name": "option",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleStart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport packageJson from '../../../../package.json';\r\nimport { MusicService } from '../../shared/music.service';\r\n\r\n@Component({\r\n  selector: 'app-main-menu',\r\n  templateUrl: './main-menu.component.html',\r\n  styleUrl: './main-menu.component.scss'\r\n})\r\nexport class MainMenuComponent {\r\n\r\n  MENU_OPTIONS: Record<string,any> = {\r\n    'start': () => this.handleStart(),\r\n    'credits': () => this.router.navigate(['credits']),\r\n  };\r\n\r\n  version = packageJson.version;\r\n\r\n  constructor(private router: Router, private musicService: MusicService){}\r\n\r\n  ngOnInit() {\r\n    this.musicService.playMusic();\r\n  }\r\n\r\n  handleMenuOption(option: string) {\r\n    this.MENU_OPTIONS[option]();\r\n  }\r\n\r\n  handleStart() {\r\n    this.router.navigate(['start']);\r\n  };\r\n\r\n}\r\n",
            "styleUrl": "./main-menu.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "musicService",
                        "type": "MusicService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "musicService",
                        "type": "MusicService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<section class=\"flex flex-col h-full w-full\">\r\n  <div class=\"!m-auto w-3/4 nes-container with-title is-dark is-centered\">\r\n    <p class=\"title\">Guillermo Murúa's</p>\r\n    <h1 class=\"text-8xl \">Trade Runner</h1>\r\n  </div>\r\n  <hr class=\"w-1/2 m-auto\">\r\n  <div class=\"flex flex-col gap-8 m-auto\">\r\n    <button type=\"button\" class=\"nes-btn is-error text-3xl\" (click)=\"handleMenuOption('start')\">Start</button>\r\n    <button type=\"button\" class=\"nes-btn is-warning text-3xl\" (click)=\"handleMenuOption('credits')\">Credits</button>\r\n  </div>\r\n  <div class=\"justify-start flex flex-row\">\r\n    <p>Version: {{ version }}</p>\r\n  </div>\r\n</section>\r\n\r\n"
        },
        {
            "name": "MapComponent",
            "id": "component-MapComponent-45dd8bf6b69441611d4f0c628348382b2487480cdcda6ac67d9b17567428330009e3106b3c1b88d3aa21b63f272d0aff1acf945d955e19901b7171cbc120f672",
            "file": "src/app/map/map.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-map",
            "styleUrls": [
                "./map.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./map.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "gameService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameService",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "inventoryOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "player",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Player",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "handleTravelling",
                    "args": [
                        {
                            "name": "city",
                            "type": "ICity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "city",
                            "type": "ICity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleInventory",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport ICity from '../utils/ICity.interface';\nimport { Router } from '@angular/router';\nimport { GameService } from '../shared/game.service';\nimport { Player } from '../game/Player';\n\n@Component({\n  selector: 'app-map',\n  templateUrl: './map.component.html',\n  styleUrls: ['./map.component.scss']\n})\nexport class MapComponent implements OnInit {\n\n  player!: Player;\n  inventoryOpen = false;\n\n  constructor(private router: Router,public gameService: GameService) { }\n\n  ngOnInit() {\n    this.gameService.loadGame();\n    this.player = this.gameService.player;\n    if (this.gameService.isGameOver()) {\n      this.router.navigate(['end']);\n    }\n  }\n\n  toggleInventory() {\n    this.inventoryOpen = !this.inventoryOpen;\n  }\n\n  handleTravelling(city: ICity) {\n    this.router.navigate([`location`], {\n      queryParams: {\n        id: city.id\n      }\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".eventlog-layout {\r\n  height: 70%;\r\n  margin-top: 5%;\r\n}\r\n\r\n.upper-aside-layout {\r\n  height: 80%;\r\n}\r\n",
                    "styleUrl": "./map.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<main class=\"flex flex-row w-full h-full\">\r\n    <aside class=\"flex flex-col w-1/4 nes-container is-dark p-2 justify-between\">\r\n      <div class=\"upper-aside-layout flex flex-col\">\r\n        <app-agent-stats [stats]=\"player\" [day]=\"gameService.getCurrentDay()\" />\r\n        <app-eventlog class=\"eventlog-layout\" [eventLog]=\"gameService.eventLog\" [day]=\"gameService.getCurrentDay()\" />\r\n      </div>\r\n      <button class=\"nes-btn is-warning\" (click)=\"toggleInventory()\">Inventory</button>\r\n    </aside>\r\n  <section class=\"flex w-full text-center\">\r\n    @if (inventoryOpen) {\r\n    <div class=\"nes-container is-dark h-full\">\r\n      <app-inventory [inventory]=\"player.inventory\" />\r\n    </div>\r\n    }\r\n    <app-interactive-view (travelledTo)=\"handleTravelling($event)\" [cities]=\"gameService.cities\" />\r\n  </section>\r\n</main>\r\n"
        },
        {
            "name": "MusicButtonComponent",
            "id": "component-MusicButtonComponent-91c87f0c16a22ebf56a8524fdf724b218d25962db9c9fbd9c8bbf9e9adb0404a006cf74c18fae8ac9d3039403f65bf2d014833c1ca16df1533ce5ed087a5357a",
            "file": "src/app/shared/music-button/music-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-music-button",
            "styleUrls": [
                "./music-button.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./music-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isMusicPlaying",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "handleMusicButton",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { MusicService } from '../music.service';\n\n@Component({\n  selector: 'app-music-button',\n  templateUrl: './music-button.component.html',\n  styleUrls: ['./music-button.component.css']\n})\nexport class MusicButtonComponent {\n\n  isMusicPlaying: boolean = true;\n\n  constructor(private musicService: MusicService) { }\n\n  handleMusicButton() {\n    if (this.isMusicPlaying) {\n      this.musicService.pauseMusic();\n      this.isMusicPlaying = false;\n    } else {\n      this.musicService.playMusic();\n      this.isMusicPlaying = true;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./music-button.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "musicService",
                        "type": "MusicService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "musicService",
                        "type": "MusicService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<button class=\"nes-btn\" (click)=\"handleMusicButton()\" [ngClass]=\"{'is-warning': isMusicPlaying, 'is-error': !isMusicPlaying}\">\n  Music {{ isMusicPlaying ? 'On' : 'Off'}}\n</button>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-d32b0f19628254ea3fc5526c4d4564ada1cc83cf936759006d90a46f5874b02a3359e331bddda20b22e74a616a6443c660602ba74dd38ebe1160759e0de6f7ba",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\n.storybook-page h2 {\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\n.storybook-page ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.storybook-page .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "StartScreenComponent",
            "id": "component-StartScreenComponent-bb4477dfc43ce49b2e011431e5ccff1c619c06324d7b8911dea8569f468475383ec5e6d37bfc304ead516abf156c8a9b931c7c884543a554291088b3d3936271",
            "file": "src/app/story/start-screen/start-screen.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-start-screen",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./start-screen.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentSlide",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "nameForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "triggerWarningConsent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleGameStart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleNext",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handlePrevious",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleWarningConsent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleWarningDenial",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { GameService } from '../../shared/game.service';\r\nimport { FormGroup, Validators, FormBuilder, ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { Router, RouterModule } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-start-screen',\r\n  standalone: true,\r\n  imports: [ReactiveFormsModule, FormsModule, RouterModule],\r\n  templateUrl: './start-screen.component.html',\r\n  styleUrl: './start-screen.component.scss'\r\n})\r\nexport class StartScreenComponent {\r\n\r\n  currentSlide: number = 0;\r\n  public nameForm!: FormGroup;\r\n  public triggerWarningConsent = false;\r\n\r\n  constructor(private gameService: GameService, private fb: FormBuilder, private router: Router) {\r\n    this.nameForm = this.fb.group({\r\n      playerName: ['', Validators.required]\r\n    })\r\n  }\r\n\r\n  handleNext() {\r\n    this.currentSlide++;\r\n  }\r\n\r\n  handlePrevious() {\r\n    this.currentSlide--;\r\n  }\r\n\r\n\r\n  handleGameStart() {\r\n    const playerName = this.nameForm.get('playerName')?.value;\r\n    this.gameService.startGame(playerName!);\r\n    this.router.navigate(['map']);\r\n  }\r\n\r\n  handleWarningConsent() {\r\n    this.triggerWarningConsent = true;\r\n  }\r\n\r\n  handleWarningDenial() {\r\n    window.close();\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./start-screen.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "@if (!triggerWarningConsent) {\r\n<main class=\"flex flex-col mt-20\">\r\n  <div class=\"nes-container is-dark with-title\">\r\n    <p class=\"title\">Warning</p>\r\n    <p class=\"!mb-10\"> This game contains <span class=\"nes-text is-error\">strong language</span>, <span\r\n        class=\"nes-text is-warning\">mild violence</span>, and <span class=\"nes-text is-success\">drug use</span>. It also\r\n      contains mentions of <span class=\"nes-text is-primary\">torture</span>, <span class=\"nes-text is-primary\">\r\n        psychological distress</span>, and <span class=\"nes-text is-primary\">suicide</span>. This content may be\r\n      disturbing or triggering to some individuals.\r\n      This game is a fictional work of art (arguably) and should not be a substitute for proper education or real-world\r\n      understanding. The characters, events, and ideas portrayed in this game are purely fictional and do not reflect\r\n      real-world beliefs or actions. Please approach the content with critical thinking and discretion. It is important\r\n      to remember that this is a game meant for entertainment and debate purposes only, and any replication of the ideas\r\n      or actions of characters within the game is strongly discouraged. Use your judgment responsibly.\r\n      Please do not play this game if you are under 18 years old, or if you are currently experiencing psychological\r\n      distress, depression, or suicidal thoughts. This game contains mild-political commentary.\r\n      Again, player discretion is advised.\r\n    </p>\r\n    <div class=\"flex flex-row justify-between m-auto w-1/2\">\r\n      <button type=\"button\" class=\"nes-btn m-auto is-error text-2xl\" (click)=\"handleWarningConsent()\">I'm 18 and over and I understand.</button>\r\n      <button type=\"button\" class=\"nes-btn m-auto bg-white text-2xl\" (click)=\"handleWarningDenial()\">I'm not 18 or I don't understand</button>\r\n    </div>\r\n  </div>\r\n</main>\r\n} @else {\r\n<main class=\"flex flex-col gap-5 h-full\">\r\n  <h2 class=\"text-2xl p-3\">In the distant future of 2004, </h2>\r\n  @if (currentSlide === 0) {\r\n  <p class=\"text-sm leading-10 indent-8 p-10 pt-0 w-full m-auto mb-2 pb-0\"> 30 years after the escalation of <span\r\n      class=\"nes-text is-error\">global conflict</span> wiped\r\n    <span class=\"nes-text is-error\">86% of man-kind</span>, people of the world - what's left of them - have abandoned\r\n    the underground shelters they have called home for so long. The surface is now a barren wasteland\r\n    with limited natural resources that are contested by\r\n    new factions, forged in the fires of a new world. Amidst the conflict, a new class emerged, out of the need to\r\n    transport essential goods in the now lawless plains that separate\r\n    the few remanning human settlements - the <span class=\"nes-text is-success\">Trade Runners</span>. These brave men\r\n    and\r\n    women risk their lifes the Dead Zones looking for opportunities to make a <span\r\n      class=\"nes-text is-warning\">substantial profit</span>\r\n    trading food, medicine, tools and more.\r\n  </p>\r\n  }\r\n  @if (currentSlide === 1) {\r\n  <p class=\"text-sm leading-10 indent-8 p-10 pt-0 w-full m-auto mb-2 pb-0\">Your father was one such Runner. He drove\r\n    both of you to\r\n    <span class=\"nes-text is-warning\">Happy Valley</span>, a valley surrounded by mountains,\r\n    home to a group of rapidly <span class=\"nes-text is-success\">expanding settlements</span> and many, many\r\n    opportunities. He got a loan from a local gang, <span class=\"nes-text is-error\">Los\r\n      Treze</span>, to start your new life, but something happened. He lost\r\n    a shipment in a raid and was unable to make his payments. One day, coming back to camp from ressuply, you find your\r\n    dad on the ground, <span class=\"nes-text is-error\">decapitated</span> . His head is impaled at the\r\n    entrance of your tent. His teeth are cleched on a piece of paper. You remove and unwrap it. It's note from the\r\n    killers <span class=\"nes-text is-error\">\"100 grand. In 30 days. Or you're next\"</span>. You hold a simple funeral,\r\n    pack up\r\n    your things and start looking for the first settlement to trade with...\r\n  </p>\r\n  }\r\n  @if (currentSlide === 2) {\r\n  <div class=\"pl-10 mb-2 w-1/2 m-auto\">\r\n    <label for=\"name\">What's your <span class=\"nes-text is-warning\">name</span>?</label>\r\n    <form [formGroup]=\"nameForm\">\r\n      <input type=\"text\" id=\"name\" formControlName=\"playerName\" class=\"nes-input is-dark\" placeholder=\"eg. Mario Mario\">\r\n    </form>\r\n  </div>\r\n  <button type=\"button\" class=\"nes-btn m-auto mt-20 mb-0 bg-white text-4xl\" (click)=\"handleGameStart()\">Begin</button>\r\n  }\r\n  <div class=\"flex flex-row justify-between m-auto w-1/2\">\r\n    @if (currentSlide !== 0) {\r\n    <button type=\"button\" class=\"nes-btn m-auto is-warning text-2xl\" (click)=\"handlePrevious()\">Back</button>\r\n    }\r\n    @if (currentSlide !== 2) {\r\n    <button type=\"button\" class=\"nes-btn m-auto bg-white text-2xl\" (click)=\"handleNext()\">Next</button>\r\n    }\r\n  </div>\r\n\r\n</main>\r\n}\r\n"
        },
        {
            "name": "StatsComponent",
            "id": "component-StatsComponent-4022fd16476ea37a5f6186b8d0d833a58b7f42325a917bfa7d8965b4477cd3678d7b013ca521916982056f710c377e7ffba4cfcde49fb7ee6d3f515b75efd275",
            "file": "src/app/shared/stats/stats.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-agent-stats",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./stats.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "day",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "stats",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Player | ICity",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { Player } from '../../game/Player';\r\nimport ICity from '../../utils/ICity.interface';\r\n\r\n@Component({\r\n  selector: 'app-agent-stats',\r\n  templateUrl: './stats.component.html',\r\n  styleUrl: './stats.component.scss'\r\n})\r\nexport class StatsComponent {\r\n\r\n  @Input() stats!: Player | ICity;\r\n  @Input() day: number = 0;\r\n\r\n  get isPlayer() {\r\n    return this.stats instanceof Player;\r\n  }\r\n\r\n  get playerHealth(): number {\r\n    return this.stats instanceof Player ? this.stats.health : 0;\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./stats.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "isPlayer": {
                    "name": "isPlayer",
                    "getSignature": {
                        "name": "isPlayer",
                        "type": "",
                        "returnType": "",
                        "line": 15
                    }
                },
                "playerHealth": {
                    "name": "playerHealth",
                    "getSignature": {
                        "name": "playerHealth",
                        "type": "number",
                        "returnType": "number",
                        "line": 19
                    }
                }
            },
            "templateData": "<div class=\"w-full h-full justify-between\">\r\n  <p>Name: {{stats.name}}</p>\r\n  @if (isPlayer) {\r\n    <p>Day: {{day}}</p>\r\n    <app-health [health]=\"playerHealth\"/>\r\n  }\r\n  <p>{{stats.money | currency:'USD'}}</p>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "MapModule",
            "id": "module-MapModule-c753306da8de36925f8c8e1c7360ddeba4d8fa6a8a78a14304a0118e34abcf8ac30545fb53e71338f2b03b7568e5d068e11c46fd204a953d3dc6c241a89d3ce0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/map/map.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MapComponent } from './map.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { InteractiveViewComponent } from './interactive-view/interactive-view.component';\nimport { LocationComponent } from './location/location.component';\n\n@NgModule({\n  imports: [\n    SharedModule,\n    CommonModule,\n  ],\n  declarations: [\n    MapComponent,\n    LocationComponent,\n    InteractiveViewComponent,\n  ]\n})\nexport class MapModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "InteractiveViewComponent"
                        },
                        {
                            "name": "LocationComponent"
                        },
                        {
                            "name": "MapComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MenuModule",
            "id": "module-MenuModule-0e4b4291b082be01b070b17978012bff9b44541ec851e0583c31411c48ff8ad448b1db2e62cfad1cf367324713b3bbd1c6c38a6fec1b838a32d32c6a341181d7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/menu/menu.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MainMenuComponent } from './main-menu/main-menu.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MainMenuComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n  ]\r\n})\r\nexport class MenuModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MainMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-642253bf9f799d090babbaaeeb4f3b6cbe01733bc4d2616141bdaf8ddab6bc4e1d7ea3c05ced1b44a56ed89ebeba1e357d25f45fd72cdaab8f087e008ea5da22",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { InventoryComponent } from './inventory/inventory.component';\r\nimport { EventlogComponent } from './eventlog/eventlog.component';\r\nimport { StatsComponent } from './stats/stats.component';\r\nimport { GameService } from './game.service';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { HealthComponent } from './health/health.component';\r\nimport { ItemAmountInputComponent } from './item-amount-input/item-amount-input.component';\r\nimport { MusicService } from './music.service';\r\nimport { MusicButtonComponent } from './music-button/music-button.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    InventoryComponent,\r\n    EventlogComponent,\r\n    StatsComponent,\r\n    HealthComponent,\r\n    ItemAmountInputComponent,\r\n    MusicButtonComponent\r\n  ],\r\n  providers: [\r\n    GameService,\r\n    MusicService\r\n  ],\r\n  exports: [\r\n    InventoryComponent,\r\n    EventlogComponent,\r\n    StatsComponent,\r\n    ItemAmountInputComponent,\r\n    MusicButtonComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n  ]\r\n})\r\nexport class SharedModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "GameService"
                        },
                        {
                            "name": "MusicService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "EventlogComponent"
                        },
                        {
                            "name": "HealthComponent"
                        },
                        {
                            "name": "InventoryComponent"
                        },
                        {
                            "name": "ItemAmountInputComponent"
                        },
                        {
                            "name": "MusicButtonComponent"
                        },
                        {
                            "name": "StatsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "EventlogComponent"
                        },
                        {
                            "name": "InventoryComponent"
                        },
                        {
                            "name": "ItemAmountInputComponent"
                        },
                        {
                            "name": "MusicButtonComponent"
                        },
                        {
                            "name": "StatsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StoryModule",
            "id": "module-StoryModule-44d3b28d39e33dc26bb748cbdb4089266d43fb4f660b9ab1b3a867afd4ab5180b3fd4408790801215e95731c20a8e5d288ea933e26d2ffa5c9b238142cb98c2f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/story/story.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { StartScreenComponent } from './start-screen/start-screen.component';\r\nimport { EndScreenComponent } from './end-screen/end-screen.component';\r\nimport { CreditsComponent } from './credits/credits.component';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    SharedModule,\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    EndScreenComponent,\r\n    CreditsComponent\r\n  ],\r\n})\r\nexport class StoryModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CreditsComponent"
                        },
                        {
                            "name": "EndScreenComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TradingModule",
            "id": "module-TradingModule-3f40e9fd63340a5000e1717a61fb9e11a8aea8076f465e09d1e56de0bdb10380ef7ab56a3af988d3e8df86a8fe5b708fd697c90fd815cb43a9561b72b114ddfd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/trading/trading.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule\r\n  ]\r\n})\r\nexport class TradingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [provideRouter(routes)]\r\n}"
            },
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/menu/main-menu/stories/main-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\n    await expect(loginButton).toBeInTheDocument();\n    await userEvent.click(loginButton);\n    await expect(loginButton).not.toBeInTheDocument();\n\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\n    await expect(logoutButton).toBeInTheDocument();\n  },\n}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\n  title: 'Example/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  render: (args: ButtonComponent) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<HeaderComponent>",
                "defaultValue": "{\n  title: 'Example/Header',\n  component: HeaderComponent,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\n  tags: ['autodocs'],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PageComponent>",
                "defaultValue": "{\n  title: 'Example/Page',\n  component: PageComponent,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/menu/main-menu/stories/main-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(args: any) => ({\r\n  component: MainMenuComponent,\r\n  props: args,\r\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<HeaderComponent>",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PageComponent>",
                "file": "src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [
            {
                "name": "EFFECT_TYPES",
                "childs": [
                    {
                        "name": "SCARCITY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SCARCITY"
                    },
                    {
                        "name": "EXCESS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "EXCESS"
                    },
                    {
                        "name": "POVERTY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "POVERTY"
                    },
                    {
                        "name": "ABUNDANCE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ABUNDANCE"
                    },
                    {
                        "name": "CITY_BUYING_X",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CITY_BUYING_X"
                    },
                    {
                        "name": "CITY_SELLING_X",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CITY_SELLING_X"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/game/Effect_Types.enum.ts"
            },
            {
                "name": "ENDINGS",
                "childs": [
                    {
                        "name": "INSOLVENT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 0
                    },
                    {
                        "name": "DIED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "PAID",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    },
                    {
                        "name": "RICH",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 3
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/game/Endings.enum.ts"
            }
        ],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [provideRouter(routes)]\r\n}"
                }
            ],
            "src/app/menu/main-menu/stories/main-menu.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/menu/main-menu/stories/main-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/menu/main-menu/stories/main-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(args: any) => ({\r\n  component: MainMenuComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\n  title: 'Example/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  render: (args: ButtonComponent) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
                }
            ],
            "src/stories/header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<HeaderComponent>",
                    "defaultValue": "{\n  title: 'Example/Header',\n  component: HeaderComponent,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\n  tags: ['autodocs'],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
                }
            ],
            "src/stories/page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\n    await expect(loginButton).toBeInTheDocument();\n    await userEvent.click(loginButton);\n    await expect(loginButton).not.toBeInTheDocument();\n\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\n    await expect(logoutButton).toBeInTheDocument();\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PageComponent>",
                    "defaultValue": "{\n  title: 'Example/Page',\n  component: PageComponent,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/game/Effect_Types.enum.ts": [
                {
                    "name": "EFFECT_TYPES",
                    "childs": [
                        {
                            "name": "SCARCITY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SCARCITY"
                        },
                        {
                            "name": "EXCESS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "EXCESS"
                        },
                        {
                            "name": "POVERTY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "POVERTY"
                        },
                        {
                            "name": "ABUNDANCE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ABUNDANCE"
                        },
                        {
                            "name": "CITY_BUYING_X",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CITY_BUYING_X"
                        },
                        {
                            "name": "CITY_SELLING_X",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CITY_SELLING_X"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/game/Effect_Types.enum.ts"
                }
            ],
            "src/app/game/Endings.enum.ts": [
                {
                    "name": "ENDINGS",
                    "childs": [
                        {
                            "name": "INSOLVENT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 0
                        },
                        {
                            "name": "DIED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "PAID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        },
                        {
                            "name": "RICH",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 3
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/game/Endings.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/stories/button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<HeaderComponent>",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PageComponent>",
                    "file": "src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/game/Game.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Game",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/game/GameEvents.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GameEvents",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/game/Inventory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Inventory",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/game/Item.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Item",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/game/Location.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Location",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/game/Player.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Player",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/map/interactive-view/interactive-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InteractiveViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/map/location/location.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LocationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/menu/load-menu/load-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/menu/main-menu/main-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/menu/main-menu/stories/main-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/menu/main-menu/stories/main-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/eventlog/eventlog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EventlogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/game.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GameService",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/health/health.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HealthComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/inventory/inventory.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InventoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/item-amount-input/item-amount-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemAmountInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/music-button/music-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MusicButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/music.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MusicService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/stats/stats.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/story/credits/credits.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreditsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/story/end-screen/end-screen.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EndScreenComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/story/start-screen/start-screen.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StartScreenComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/ICity.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICity",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}